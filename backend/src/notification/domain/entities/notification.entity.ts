import {
  NotificationType,
  NotificationPriority,
  NotificationStatus,
  NotificationChannel,
} from '@prisma/client';

export class Notification {
  constructor(
    public readonly id: string,
    public readonly userId: string,
    public readonly title: string,
    public readonly message: string,
    public readonly type: NotificationType,
    public readonly priority: NotificationPriority,
    public readonly channel: NotificationChannel,
    public readonly status: NotificationStatus,
    public readonly createdAt: Date,
    public readonly scheduledFor?: Date,
    public readonly deliveredAt?: Date,
    public readonly readAt?: Date,
    public readonly expiresAt?: Date,
    public readonly context?: Record<string, any>,
    public readonly updatedAt?: Date,
  ) {}

  static create(data: {
    userId: string;
    title: string;
    message: string;
    type: NotificationType;
    priority?: NotificationPriority;
    channel?: NotificationChannel;
    scheduledFor?: Date;
    expiresAt?: Date;
    context?: Record<string, any>;
  }): Notification {
    return new Notification(
      '', // ID will be generated by database
      data.userId,
      data.title,
      data.message,
      data.type,
      data.priority || NotificationPriority.NORMAL,
      data.channel || NotificationChannel.IN_APP,
      NotificationStatus.PENDING,
      new Date(),
      data.scheduledFor,
      undefined, // deliveredAt
      undefined, // readAt
      data.expiresAt,
      data.context,
    );
  }

  markAsDelivered(): Notification {
    return new Notification(
      this.id,
      this.userId,
      this.title,
      this.message,
      this.type,
      this.priority,
      this.channel,
      NotificationStatus.DELIVERED,
      this.createdAt,
      this.scheduledFor,
      new Date(),
      this.readAt,
      this.expiresAt,
      this.context,
      new Date(),
    );
  }

  markAsRead(): Notification {
    return new Notification(
      this.id,
      this.userId,
      this.title,
      this.message,
      this.type,
      this.priority,
      this.channel,
      NotificationStatus.READ,
      this.createdAt,
      this.scheduledFor,
      this.deliveredAt,
      new Date(),
      this.expiresAt,
      this.context,
      new Date(),
    );
  }

  markAsFailed(): Notification {
    return new Notification(
      this.id,
      this.userId,
      this.title,
      this.message,
      this.type,
      this.priority,
      this.channel,
      NotificationStatus.FAILED,
      this.createdAt,
      this.scheduledFor,
      this.deliveredAt,
      this.readAt,
      this.expiresAt,
      this.context,
      new Date(),
    );
  }

  isExpired(): boolean {
    return this.expiresAt ? new Date() > this.expiresAt : false;
  }

  isScheduled(): boolean {
    return this.scheduledFor ? new Date() < this.scheduledFor : false;
  }
}
